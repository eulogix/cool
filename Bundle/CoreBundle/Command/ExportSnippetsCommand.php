<?php

/*
 * This file is part of the Eulogix\Cool package.
 *
 * (c) Eulogix <http://www.eulogix.com/>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
*/

namespace Eulogix\Cool\Bundle\CoreBundle\Command;

use Eulogix\Cool\Bundle\CoreBundle\Model\Core\CodeSnippet;
use Eulogix\Cool\Bundle\CoreBundle\Model\Core\CodeSnippetQuery;
use Eulogix\Cool\Lib\Builders\SnippetExtractor;
use Eulogix\Cool\Lib\Database\Propel\Util;
use Eulogix\Cool\Lib\Symfony\Console\CoolCommand;
use Eulogix\Cool\Lib\Util\ReflectionUtils;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * @author Pietro Baricco <pietro@eulogix.com>
 */

class ExportSnippetsCommand extends CoolCommand
{
    /**
     * {@inheritdoc}
     */
    protected function configure()
    {
        $this
            ->setName('cool:export-snippets')
            ->addArgument('target', InputArgument::REQUIRED, 'The class to create')
            ->addArgument('namespace', InputArgument::REQUIRED, 'The namespace of the class to create')
            ->setDescription('Exports the code snippets in a class')
            ->setHelp("");
    }

    /**
     * {@inheritdoc}
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $target = $input->getArgument('target');
        $namespace = $input->getArgument('namespace');

        $pi = pathinfo($target);
        $content = <<<EOT
<?php

/*
 * automatically generated by ExportSnippets
 */

namespace $namespace;

use Eulogix\Cool\Lib\Form\DSCRUDForm;
use Eulogix\Cool\Lib\Form\FormInterface;
use Eulogix\Cool\Lib\Widget\WidgetInterface;
use Eulogix\Cool\Lib\Lister\ListerInterface;

use Eulogix\Cool\Lib\Annotation\SnippetMeta;

class {$pi['filename']}
{

EOT;

        $snippets = CodeSnippetQuery::create()->find();
        foreach($snippets as $snippet) {
            /**
             * @var CodeSnippet $snippet
             */
            $contextIgnore = [];
            $paramsDoc = "";
            $params = [];
            if(preg_match('/\$widget/', $snippet->getSnippet())) {
                $contextIgnore[] = '"widget"';
                $paramsDoc.="     * @param WidgetInterface \$widget\n";
                $params[] = "WidgetInterface \$widget";
            }

            $contextIgnoreString = implode(',', $contextIgnore);
            $content.=<<<EOT
    /**
     * @SnippetMeta(category="{$snippet->getCategory()}", contextIgnore={{$contextIgnoreString}}, directInvocation="true", description="{$snippet->getName()}, longDescription="{$snippet->getDescription()}")
     *

EOT;
            foreach($snippet->getCodeSnippetVariables() as $variable) {
                $paramsDoc.="     * @param string \${$variable->getName()} {$variable->getDescription()}\n";
                $params[] = "\${$variable->getName()}";
            }


            $content.="$paramsDoc     */\n";
            $methodName = Util::camelize(preg_replace('/[^a-z0-9]/sim','_',$snippet->getName()));

            $paramsString = implode(', ',$params);

            $body = $snippet->getType() == CodeSnippet::TYPE_EXPRESSION ? "return {$snippet->getSnippet()};" : $snippet->getSnippet();
            $content.=<<<EOT
    public static function {$methodName}($paramsString) {
        {$body}
    }\n\n
EOT;
        }

        $content.="\n}";

        file_put_contents($target, $content);

    }

}
